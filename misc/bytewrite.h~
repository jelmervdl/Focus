#include <iostream>
#include <string>

template <typename T>
inline void byte_write(std::ostream &out, T const &value)
{
  out.write(reinterpret_cast<char const*>(&value), sizeof(T));
}

template <typename T>
inline T byte_read(std::istream &in)
{
  T value;
  in.read(reinterpret_cast<char*>(&value), sizeof(T));
  return value;
}

template <>
inline void byte_write<std::string>(std::ostream &out, std::string const &value)
{
  byte_write<size_t>(out, value.size());
  for (size_t i(0); i < value.size(); ++i)
    byte_write<char>(out, value[i]);
}

template <>
inline std::string byte_read(std::istream &in)
{
  std::string text;
  size_t length = byte_read<size_t>(in);
  if (in.eof())
    return "";
  for (size_t i(0); i < length && !in.eof(); ++i)
    text += byte_read<char>(in);
  log(text + " was what i read", EXTRA);
  return text;
}
